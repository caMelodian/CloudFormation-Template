Parameters:
  KeyName:
    Description: Name of SSH access Key
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  LatestAmiId:
    Description: (DO NOT CHANGE)
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    AllowedValues:
      - /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  ################################################
  #                                               VPC                                                                        #
  ################################################

#VPC
  AWSVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: AWS-VPC
#IGW
  AWSIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AWS-IGW
#VPC-IGW
  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref AWSIGW
      VpcId: !Ref AWSVPC

  ################################################
  #                                                Subnet                                                                  #
  ################################################

#PublicSN-1
  AWSVPCSN1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AWSVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: AWS-VPC-SN-1

#PublicSN-2
  AWSVPCSN2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AWSVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: AWS-VPC-SN-2


  ################################################
  #                                               Routing Table                                                        #
  ################################################

#PublicSN1RT
  MYPublicSNRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AWSVPC
      Tags:
        - Key: Name
          Value: AWS-PublicSN1-RT

  ################################################
  #                                               Route                                                                     #
  ################################################

#Route-SN-1
  PublicSN1Route:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties:
      RouteTableId: !Ref MYPublicSNRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref AWSIGW


  ################################################
  #                                               VPC & RT 연결                                                        #
  ################################################

#PublicSN-Route
  CloudNetaPublicSN1RouteTableAssociations:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AWSVPCSN1
      RouteTableId: !Ref MYPublicSNRT

#PublicSN-Route
  CloudNetaPublicSN2RouteTableAssociations:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AWSVPCSN2
      RouteTableId: !Ref MYPublicSNRT


  ################################################
  #                                               SG                                                                           #
  ################################################

#SG
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 and SSH access via port 22
      VpcId: !Ref AWSVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SecurityGroup


  ################################################
  #                                                 EC2                                                                       #
  ################################################

#PublicEC2
  AWSEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Server-EC2-1
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref AWSVPCSN1
          GroupSet:
          - !Ref SecurityGroup
          AssociatePublicIpAddress: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostname DVWA-EC2
            yum install -y httpd mariadb-server mariadb php php-mysql php-gd
            systemctl start mariadb httpd
            systemctl enable httpd.service mariadb.service
            echo -e "\n\nqwe123\nqwe123\ny\nn\ny\ny\n" | /usr/bin/mysql_secure_installation
            mysql -uroot -pqwe123 -e "create database dvwa; GRANT ALL PRIVILEGES ON dvwa.* TO 'dvwa'@'localhost' IDENTIFIED BY 'qwe123'; flush privileges;"
            wget https://github.com/ethicalhack3r/DVWA/archive/master.zip
            unzip master.zip
            mv DVWA-master/* /var/www/html/
            mv DVWA-master/.htaccess /var/www/html/
            cp /var/www/html/config/config.inc.php.dist /var/www/html/config/config.inc.php
            sed -i "s/p@ssw0rd/qwe123/g" /var/www/html/config/config.inc.php
            sed -i 's/allow_url_include = Off/allow_url_include = on/g' /etc/php.ini
            chmod 777 /var/www/html/hackable/uploads
            chmod 777 /var/www/html/config
            chmod 666 /var/www/html/external/phpids/0.6/lib/IDS/tmp/phpids_log.txt
            systemctl restart httpd.service


  ################################################
  #                                               Load Balancer                                                       #
  ################################################

  # ALBTargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     Name: AWS-VPC-ALB-TG
  #     Port: 80
  #     Protocol: HTTP
  #     VpcId: !Ref AWSVPC
  #     Targets:
  #       - Id: !Ref AWSEC2
  #         Port: 80

  # ApplicationLoadBalancer:
  #   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #   DependsOn: IGWAttachment
  #   Properties:
  #     Name: AWS-ALB
  #     Scheme: internet-facing
  #     SecurityGroups:
  #       - !Ref SecurityGroup
  #     Subnets:
  #       - !Ref AWSVPCSN1
  #       - !Ref AWSVPCSN2

  # ALBListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref ALBTargetGroup
  #     LoadBalancerArn: !Ref ApplicationLoadBalancer
  #     Port: 80
  #     Protocol: HTTP
