Parameters:
  KeyName:
    Description: Nmae of SSH access Key
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

Resources:
################################################
#                                               VPC                                                                        #
################################################

# AWS VPC
  AWSVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.50.0.0/16
      Tags:
        - Key: Name
          Value: AWS-VPC

  AWSIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AWS-IGW

  AWSVPCIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref AWSIGW
      VpcId: !Ref AWSVPC

# IDC VPC
  IDCVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.60.0.0/16
      Tags:
        - Key: Name
          Value: AWS-VPC

  IDCIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AWS-IGW

  IDCVPCIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IDCIGW
      VpcId: !Ref IDCVPC


################################################
#                                                Subnet                                                                  #
################################################

# IDC VPC public SN
  IDCPublicSN:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref IDCVPC
      CidrBlock: 10.60.0.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: IDC-Public-SN

# AWS VPC public SN
  AWSPublicSN:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AWSVPC
      CidrBlock: 10.50.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: AWS-Public-SN

# IDC VPC private SN
  IDCPrivateSN:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref IDCVPC
      CidrBlock: 10.60.1.0/24
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: IDC-Private-SN


################################################
#                                               Routing Table                                                        #
################################################

# AWS Public SN RT
  AWSPublicSNRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AWSVPC
      Tags:
        - Key: Name
          Value: AWS-Public-SN-RT

  IDCPublicSNRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref IDCVPC
      Tags:
        - Key: Name
          Value: IDC-Public-SN-RT

  IDCPrivateSNRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref IDCVPC
      Tags:
        - Key: Name
          Value: IDC-Private-SN-RT


################################################
#                                                Route                                                                     #
################################################

# AWS VPC Route
  AWSVPCRoute:
    Type: AWS::EC2::Route
    DependsOn: AWSVPCIGWAttachment
    Properties:
      RouteTableId: !Ref AWSPublicSNRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref AWSIGW

# IDC VPC Route
  IDCVPCRoute:
    Type: AWS::EC2::Route
    DependsOn: IDCVPCIGWAttachment
    Properties:
      RouteTableId: !Ref IDCPublicSNRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IDCIGW

# IDC VPC Route
####### 재설정 필요 
  IDCVPCPrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: IDCVPCIGWAttachment
    Properties:
      RouteTableId: !Ref IDCPrivateSNRT
      DestinationCidrBlock: 10.50.0.0/16
      NetworkInterfaceId: !Ref ENI0


################################################
#                                               VPC & RT 연결                                                        #
################################################

# AWS public SN1연결
  AWSPublicSNRouteTableAssociations:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AWSPublicSN
      RouteTableId: !Ref AWSPublicSNRT


# IDC Public SN 연결 
  IDCPublicSNRouteTableAssociations:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref IDCPublicSN
      RouteTableId: !Ref IDCPublicSNRT


  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  ENI0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: Instance1 eth0
      GroupSet:
        - !Ref IDCVPCSecurityGroup
      PrivateIpAddress: 10.60.0.100
      SubnetId: !Ref IDCPublicSN
      Tags: 
        - Key: Name
          Value: CGW-eni

  VPCAssociateEIP1:
    Type: AWS::EC2::EIPAssociation
    DependsOn: IDCVPCEC2
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      NetworkInterfaceId: !Ref ENI0


################################################
#                                               SG                                                                           #
################################################

# AWS VPC SG
  AWSVPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via Subnet
      VpcId: !Ref AWSVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      - IpProtocol: tcp
        FromPort: 53
        ToPort: 53
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 53
        ToPort: 53
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 4500
        ToPort: 4500
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: AWS-VPC-SecurityGroup

# IDC VPC SG
  IDCVPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via Subnet
      VpcId: !Ref IDCVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      - IpProtocol: tcp
        FromPort: 53
        ToPort: 53
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 53
        ToPort: 53
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 4500
        ToPort: 4500
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: IDC-VPC-SecurityGroup


################################################
#                                                 EC2                                                                       #
################################################

# AWS VPC EC2
  AWSVPCEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-09e70258ddbdf3c90
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: AWS-VPC-EC2
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref AWSPublicSN
          GroupSet:
          - !Ref AWSVPCSecurityGroup
          AssociatePublicIpAddress: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            amazon-linux-extras install epel -y
            yum install httpd -y
            systemctl start httpd
            echo "<h1>AWS VPC Test Web Server-1</h1>" > /var/www/html/index.html

# IDC VPC EC2
  IDCVPCEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-09e70258ddbdf3c90
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: IDC-VPC-CGW-Device
      NetworkInterfaces:
        - DeviceIndex: 0
          NetworkInterfaceId: !Ref ENI0
          # GroupSet:
          # - !Ref IDCVPCSecurityGroup
          # # AssociatePublicIpAddress: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            (
            echo "qwe123"
            echo "qwe123"
            ) | passwd --stdin root
            sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
            sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
            service sshd restart
            amazon-linux-extras install epel -y            
            hostnamectl --static set-hostname IDC-CGW
            yum -y install tcpdump openswan
            cat <<EOF>> /etc/sysctl.conf
            net.ipv4.ip_forward=1
            net.ipv4.conf.all.accept_redirects = 0
            net.ipv4.conf.all.send_redirects = 0
            net.ipv4.conf.default.send_redirects = 0
            net.ipv4.conf.eth0.send_redirects = 0
            net.ipv4.conf.default.accept_redirects = 0
            net.ipv4.conf.eth0.accept_redirects = 0

#Private EC2
  IDCVPCPrivateInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-09e70258ddbdf3c90
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Private-EC2
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref IDCPrivateSN
          PrivateIpAddress: 10.60.1.100
          GroupSet:
          - !Ref IDCVPCSecurityGroup
      UserData:
          Fn::Base64: |
            #!/bin/bash
            (
            echo "qwe123"
            echo "qwe123"
            ) | passwd --stdin root
            sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
            sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
            service sshd restart
