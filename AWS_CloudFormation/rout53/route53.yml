Parameters:
  KeyName:
    Description: Nmae of SSH access Key
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.


Resources:
################################################
#                                               VPC                                                                        #
################################################

# MY VPC
  MYVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: MY-VPC

  MYIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MY-IGW

  MYVPCIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MYIGW
      VpcId: !Ref MYVPC


################################################
#                                               Public Subnet                                                        #
################################################

# MY VPC public SN
  MYPublicSN1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MYVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: MY-Public-SN-1

  MYPublicSN2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MYVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: MY-Public-SN-2


################################################
#                                               Routing Table                                                        #
################################################

# MY Public SN RT
  MYPublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MYVPC
      Tags:
        - Key: Name
          Value: MY-Public-RT


################################################
#                                                Route                                                                     #
################################################

# My VPC Route
  MYVPCRoute:
    Type: AWS::EC2::Route
    DependsOn: MYVPCIGWAttachment
    Properties:
      RouteTableId: !Ref MYPublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MYIGW

################################################
#                                               VPC & RT 연결                                                        #
################################################

# MY public SN 연결
  MYVPCSNRouteTableAssociations:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MYPublicSN1
      RouteTableId: !Ref MYPublicRT

  MYVPCSN2RouteTableAssociations:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MYPublicSN2
      RouteTableId: !Ref MYPublicRT


################################################
#                                               SG                                                                           #
################################################

# ELB VPC SG
  MYVPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via Subnet
      VpcId: !Ref MYVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 161
        ToPort: 161
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: MYVPC-SecurityGroup


################################################
#                                               EC2                                                                         #
################################################

# MYVPC EC2
  MYVPCEC2One:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-09e70258ddbdf3c90
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: MY-VPC-EC2
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref MYPublicSN1
          GroupSet:
          - !Ref MYVPCSecurityGroup
          # AssociatePublicIpAddress: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            amazon-linux-extras install epel -y
            yum install httpd -y
            systemctl start httpd
            echo "<h1>Test Web Server-1</h1>" > /var/www/html/index.html

  MYVPCEC2Two:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-09e70258ddbdf3c90
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: MY-VPC-EC2
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref MYPublicSN2
          GroupSet:
          - !Ref MYVPCSecurityGroup
          # AssociatePublicIpAddress: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            amazon-linux-extras install epel -y
            yum install httpd -y
            systemctl start httpd
            echo "<h1>Test Web Server-2</h1>" > /var/www/html/index.html

################################################
#                                               EIP                                                                          #
################################################

# EIP
  # PublicInstanceENI01:
  #   Type: AWS::EC2::NetworkInterface
  #   Properties:
  #     Description: MYVPCEC2One eth0
  #     GroupSet:
  #       - !Ref MYVPCSecurityGroup
  #     SubnetId: !Ref MYPublicSN1
  #     Tags: 
  #       - Key: Name
  #         Value: SN1 eth0

  VPCEIP1:
    Type: AWS::EC2::EIP
    Properties:
      #!Ref 넣으세요 
      InstanceId: !Ref MYVPCEC2One

  # VPCAssociateEIP1:
  #   Type: AWS::EC2::EIPAssociation
    # DependsOn: MYVPCEC2One
  #   Properties:
  #     AllocationId: !GetAtt VPCEIP1.AllocationId
  #     NetworkInterfaceId: !Ref PublicInstanceENI01

  # PublicInstanceENI02:
  #   Type: AWS::EC2::NetworkInterface
  #   Properties:
  #     Description: MYVPCEC2Two eth0
  #     GroupSet:
  #       - !Ref MYVPCSecurityGroup
  #     SubnetId: !Ref MYPublicSN2
  #     Tags: 
  #       - Key: Name
  #         Value: SN2 eth0

  VPCEIP2:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref MYVPCEC2Two

  # VPCAssociateEIP2:
  #   Type: AWS::EC2::EIPAssociation
  #   DependsOn: MYVPCEC2Two
  #   Properties:
  #     AllocationId: !GetAtt VPCEIP2.AllocationId
  #     NetworkInterfaceId: !Ref PublicInstanceENI02


################################################
#                                               Load Balancer                                                       #
################################################

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: My-ALB-TG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MYVPC
      Targets:
        - Id: !Ref MYVPCEC2One
          Port: 80
        - Id: !Ref MYVPCEC2Two
          Port: 80 

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: MYVPCIGWAttachment
    Properties:
      Name: My-ALB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref MYVPCSecurityGroup
      Subnets:
        - !Ref MYPublicSN1
        - !Ref MYPublicSN2

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP


################################################
#                                               DNS                                                                        #
################################################

  PublicDNS: 
    Type: AWS::Route53::HostedZone
    Properties:
      Name: mwoya.wtf
      HostedZoneConfig:
        Comment: Public Hosted Zone For mwoya.wtf

  ALBAlias:
    Type: AWS::Route::RecordSet
    Properties:
      Name: test.mwoya.wtf
      Type: A
      HostedZoneId: !Ref PublicDNS
      AlsiasTarget:
        DNSName: !GetAtt ApplicationLoadBalancer.DNSName
        HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneI


################################################
#                                               장애조치                                                                  #
################################################

# 장애조치를 위한 health check
  PrimaryHealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        IPAddress: !GetAtt MYVPCEC2One.PublicIp
        Port: 80
        ResourcePath: /index.html
      HealthCheckTags: 
        - Key: Name
          Value: Primary-Check

  SecondaryHealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        IPAddress: !GetAtt MYVPCEC2Two.PublicIp
        Port: 80
        ResourcePath: /index.html
      HealthCheckTags: 
        - Key: Name
          Value: Secondary-Check

# 장애 조치 record 안에 primary 랑 secondary
  PrimaryRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: test.mwoya.wtf
      Type: A
      TTL: 30
      HostedZoneId: !Ref PublicDNS
      ResourceRecords:
        - !GetAtt MYVPCEC2One.PublicIp
      Failover: Primary
      SetIdentifier: 1
      HealthCheckId: !Ref PrimaryHealthCheck

  SecondaryRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: test.mwoya.wtf
      Type: A
      TTL: 30
      HostedZoneId: !Ref PublicDNS
      ResourceRecords:
        - !GetAtt MYVPCEC2Two.PublicIp
      Failover: Secondary
      SetIdentifier: 2
      HealthCheckId: !Ref SecondaryHealthCheck

