Parameters:
  KeyName:
    Description: Nmae of SSH access Key
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

Resources:
  ################################################
  #                                               VPC                                                                        #
  ################################################

  # AWS VPC
  AWSVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.1.0.0/16
      Tags:
        - Key: Name
          Value: AWS-VPC

  AWSIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AWS-IGW

  AWSVPCIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref AWSIGW
      VpcId: !Ref AWSVPC

  # IDC VPC
  IDCVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.2.0.0/16
      Tags:
        - Key: Name
          Value: IDC-VPC

  IDCIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IDC-IGW

  IDCVPCIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IDCIGW
      VpcId: !Ref IDCVPC

  ################################################
  #                                                Subnet                                                                  #
  ################################################

  # AWSVPC public SN-1
  AWSVPCPublicSN1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AWSVPC
      CidrBlock: 10.1.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: AWS-VPC-Public-SN1

  # AWSVPC public SN-2
  AWSVPCPublicSN2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AWSVPC
      CidrBlock: 10.1.2.0/24
      AvailabilityZone: !Select [2, !GetAZs ""]
      Tags:
        - Key: Name
          Value: AWS-VPC-Public-SN2

  # AWSVPC private SN-1
  AWSVPCPrivateSN1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AWSVPC
      CidrBlock: 10.1.3.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: AWS-VPC-Private-SN1

  # AWSVPC private SN-2
  AWSVPCPrivateSN2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AWSVPC
      CidrBlock: 10.1.4.0/24
      AvailabilityZone: !Select [2, !GetAZs ""]
      Tags:
        - Key: Name
          Value: AWS-VPC-Private-SN2

  # IDC public SN
  IDCVPCSN:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref IDCVPC
      CidrBlock: 10.2.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: IDC-VPC-public-SN

  ################################################
  #                                               Routing Table                                                        #
  ################################################

  # AWS VPC RT
  AWSVPCRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AWSVPC
      Tags:
        - Key: Name
          Value: AWS-vpc-RT

  # AWS VPC Private RT
  AWSVPCPrivateRT1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AWSVPC
      Tags:
        - Key: Name
          Value: AWS-vpc-private-RT-1

  # AWS VPC Private RT
  AWSVPCPrivateRT2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AWSVPC
      Tags:
        - Key: Name
          Value: AWS-vpc-private-RT-2

  # IDC VPC RT
  IDCVPCSNRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref IDCVPC
      Tags:
        - Key: Name
          Value: IDC-vpc-RT

  ################################################
  #                                               Route                                                                     #
  ################################################

  # AWSVPC Route
  AWSVPCRoute:
    Type: AWS::EC2::Route
    DependsOn: AWSVPCIGWAttachment
    Properties:
      RouteTableId: !Ref AWSVPCRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref AWSIGW

  # NAT Instance Route1
  AWSNATRoute1:
    Type: AWS::EC2::Route
    DependsOn: AWSVPCIGWAttachment
    Properties:
      RouteTableId: !Ref AWSVPCPrivateRT1
      DestinationCidrBlock: 0.0.0.0/0
      NetworkInterfaceId: !Ref NATInstanceENI1

  # NAT Instance Route2
  AWSNATRoute2:
    Type: AWS::EC2::Route
    DependsOn: AWSVPCIGWAttachment
    Properties:
      RouteTableId: !Ref AWSVPCPrivateRT2
      DestinationCidrBlock: 0.0.0.0/0
      NetworkInterfaceId: !Ref NATInstanceENI2

  # IDCVPC Route
  ## CGWENI Route
  IDCVPCPublicSNVPNRoute:
    Type: AWS::EC2::Route
    DependsOn: AWSVPCIGWAttachment
    Properties:
      RouteTableId: !Ref IDCVPCSNRT
      DestinationCidrBlock: 10.0.0.0/8
      NetworkInterfaceId: !Ref CGWInstanceENI

  # IDCVPC Route
  IDCVPCRoute:
    Type: AWS::EC2::Route
    DependsOn: AWSVPCIGWAttachment
    Properties:
      RouteTableId: !Ref IDCVPCSNRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IDCIGW



  ################################################
  #                                               VPC & RT 연결                                                        #
  ################################################

  # AWS VPC public SN1연결
  AWSVPCPublicSN1RouteTableAssociations:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AWSVPCPublicSN1
      RouteTableId: !Ref AWSVPCRT

  # AWS VPC public SN2연결
  AWSVPCPublicSN2RouteTableAssociations:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AWSVPCPublicSN2
      RouteTableId: !Ref AWSVPCRT

  # AWS VPC priavte SN1연결
  AWSVPCPrivateSN1RouteTableAssociations:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AWSVPCPrivateSN1
      RouteTableId: !Ref AWSVPCPrivateRT1

  # AWS VPC priavte SN2연결
  AWSVPCPrivateSN2RouteTableAssociations:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AWSVPCPrivateSN2
      RouteTableId: !Ref AWSVPCPrivateRT2

  # IDC VPC Public SN연결
  IDCVPCPublicSNRouteTableAssociations:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref IDCVPCSN
      RouteTableId: !Ref IDCVPCSNRT


  ################################################
  #                                               SG                                                                           #
  ################################################

  # AWS VPC SG
  AWSVPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH , HTTP , HTTPS , ICMP, DNS, VPN,
      VpcId: !Ref AWSVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3128
          ToPort: 3128
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 4500
          ToPort: 4500
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: AWS-SecurityGroup

  # AWS VPC SG
  IDCVPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH , HTTP , HTTPS , ICMP, DNS, VPN, Maria DB
      VpcId: !Ref IDCVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3128
          ToPort: 3128
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 4500
          ToPort: 4500
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: IDC-SecurityGroup

  ################################################
  #                                               EIP                                                                          #
  ################################################

  # NAT Instance-1 전용
  NATInstanceEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATInstanceENI1:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: Instance1 eth0
      GroupSet:
        - !Ref AWSVPCSecurityGroup
      PrivateIpAddress: 10.1.1.100
      SubnetId: !Ref AWSVPCPublicSN1
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: NAT-Instance-eni-1

  NATInstanceVPCAssociateEIP1:
    Type: AWS::EC2::EIPAssociation
    DependsOn: NATInstance1
    Properties:
      AllocationId: !GetAtt NATInstanceEIP1.AllocationId
      NetworkInterfaceId: !Ref NATInstanceENI1

  # NAT Instance-2 전용
  NATInstanceEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATInstanceENI2:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: Instance1 eth0
      GroupSet:
        - !Ref AWSVPCSecurityGroup
      PrivateIpAddress: 10.1.2.100
      SubnetId: !Ref AWSVPCPublicSN2
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: NAT-Instance-eni-2

  NATInstanceVPCAssociateEIP2:
    Type: AWS::EC2::EIPAssociation
    DependsOn: NATInstance2
    Properties:
      AllocationId: !GetAtt NATInstanceEIP2.AllocationId
      NetworkInterfaceId: !Ref NATInstanceENI2

  # CGW Instance 전용
  CGWInstanceEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  CGWInstanceENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: Instance1 eth0
      GroupSet:
        - !Ref IDCVPCSecurityGroup
      PrivateIpAddress: 10.2.1.150
      SubnetId: !Ref IDCVPCSN
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: CGW-Instance-eni

  CGWInstanceVPCAssociateEIP:
    Type: AWS::EC2::EIPAssociation
    DependsOn: IDCVPCCGWInstance
    Properties:
      AllocationId: !GetAtt CGWInstanceEIP.AllocationId
      NetworkInterfaceId: !Ref CGWInstanceENI

  ################################################
  #                                                 EC2                                                                       #
  ################################################

  # AWS VPC NAT-Instance-1
  NATInstance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c2d3e23e757b5d84
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: NAT-Instance-1
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref NATInstanceENI1
          DeviceIndex: 0

  # AWS VPC NAT-Instance-2
  NATInstance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c2d3e23e757b5d84
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: NAT-Instance-2
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref NATInstanceENI2
          DeviceIndex: 0

  #AWS VPC Private Instance-1
  AWSVPCPrivateInstance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-09e70258ddbdf3c90
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: AWS-WebSer-1
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref AWSVPCPrivateSN1
          PrivateIpAddress: 10.1.3.100
          GroupSet:
            - !Ref AWSVPCSecurityGroup
      UserData:
        Fn::Base64: |
          #!/bin/bash
          (
          echo "qwe123"
          echo "qwe123"
          ) | passwd --stdin root
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          service sshd restart
          hostnamectl --static set-hostname Seoul-AWS-WebSrv1
          amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
          yum install -y httpd lynx
          systemctl start httpd && systemctl enable httpd
          mkdir /var/www/inc
          curl -o /var/www/inc/dbinfo.inc https://cloudneta-book.s3.ap-northeast-2.amazonaws.com/chapter8/dbinfo.inc
          curl -o /var/www/html/db.php https://cloudneta-book.s3.ap-northeast-2.amazonaws.com/chapter8/db.php
          rm -rf /var/www/html/index.html
          echo "<h1>CloudNet@ FullLab - SeoulRegion - Websrv1</h1>" > /var/www/html/index.html
          curl -o /opt/pingcheck.sh https://cloudneta-book.s3.ap-northeast-2.amazonaws.com/chapter8/pingchecker.sh
          chmod +x /opt/pingcheck.sh
          cat <<EOT>> /etc/crontab
          */3 * * * * root /opt/pingcheck.sh
          EOT
          echo "1" > /var/www/html/HealthCheck.txt

  #AWS VPC Private Instance-1
  AWSVPCPrivateInstance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-09e70258ddbdf3c90
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: AWS-WebSer-2
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref AWSVPCPrivateSN2
          PrivateIpAddress: 10.1.4.100
          GroupSet:
            - !Ref AWSVPCSecurityGroup
      UserData:
        Fn::Base64: |
          #!/bin/bash
          (
          echo "qwe123"
          echo "qwe123"
          ) | passwd --stdin root
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          service sshd restart
          hostnamectl --static set-hostname Seoul-AWS-WebSrv2
          amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
          yum install -y httpd lynx
          systemctl start httpd && systemctl enable httpd
          mkdir /var/www/inc
          curl -o /var/www/inc/dbinfo.inc https://cloudneta-book.s3.ap-northeast-2.amazonaws.com/chapter8/dbinfo.inc
          curl -o /var/www/html/db.php https://cloudneta-book.s3.ap-northeast-2.amazonaws.com/chapter8/db.php
          rm -rf /var/www/html/index.html
          echo "<h1>CloudNet@ FullLab - SeoulRegion - Websrv2</h1>" > /var/www/html/index.html
          curl -o /opt/pingcheck.sh https://cloudneta-book.s3.ap-northeast-2.amazonaws.com/chapter8/pingchecker.sh
          chmod +x /opt/pingcheck.sh
          cat <<EOT>> /etc/crontab
          */3 * * * * root /opt/pingcheck.sh
          EOT
          echo "1" > /var/www/html/HealthCheck.txt

  # IDC VPC EC2
  IDCVPCCGWInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-09e70258ddbdf3c90
      InstanceType: t2.micro
      KeyName: !Ref KeyName  
      Tags:
        - Key: Name
          Value: IDC-VPC-CGW-Device
      NetworkInterfaces:
        - DeviceIndex: 0
          NetworkInterfaceId: !Ref CGWInstanceENI
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          (
          echo "qwe123"
          echo "qwe123"
          ) | passwd --stdin root
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          service sshd restart
          amazon-linux-extras install epel -y            
          hostnamectl --static set-hostname IDC-CGW
          yum -y install tcpdump openswan
          cat <<EOF>> /etc/sysctl.conf
          net.ipv4.ip_forward=1
          net.ipv4.conf.all.accept_redirects = 0
          net.ipv4.conf.all.send_redirects = 0
          net.ipv4.conf.default.send_redirects = 0
          net.ipv4.conf.eth0.send_redirects = 0
          net.ipv4.conf.default.accept_redirects = 0
          net.ipv4.conf.eth0.accept_redirects = 0
          net.ipv4.conf.ip_vti0.rp_filter = 0
          net.ipv4.conf.eth0.rp_filter = 0
          net.ipv4.conf.default.rp_filter = 0
          net.ipv4.conf.all.rp_filter = 0
          EOF
          sysctl -p /etc/sysctl.conf
          curl -o /etc/ipsec.d/vpnconfig.sh https://cloudneta-book.s3.ap-northeast-2.amazonaws.com/chapter6/6_lab_s2s-vpnconfig.sh
          chmod +x /etc/ipsec.d/vpnconfig.sh

  #IDC VPC DNS Instance
  IDCVPCDNSInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-09e70258ddbdf3c90
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: IDC-DNS-EC2
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref IDCVPCSN
          PrivateIpAddress: 10.2.1.200
          AssociatePublicIpAddress: true
          GroupSet:
            - !Ref IDCVPCSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            (
            echo "qwe123"
            echo "qwe123"
            ) | passwd --stdin root
            sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
            sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
            service sshd restart
            amazon-linux-extras install epel -y
            yum install -y bind*
            systemctl enable --now named

            sed -i 's/nameserver 10.2.0.2/nameserver 10.2.1.200/' /etc/resolv.conf
            cat << EOT >> /etc/resolv.conf
            nameserver 10.2.0.2
            EOT

            sed -i 's/listen-on port 53 { 127.0.0.1; };/listen-on port 53 { any; };/' /etc/named.conf
            sed -i 's/allow-query     { localhost; };/allow-query     { any; };/' /etc/named.conf
            sed -i 's/dnssec-enable yes;/dnssec-enable no;/' /etc/named.conf
            sed -i 's/dnssec-validation yes;/dnssec-validation no;/' /etc/named.conf

            cat << EOT >> /etc/named.rfc1912.zones
            zone "idcseoul.internal" IN {
                type master;
                file "data/idcneta";
                allow-update { none; };
            };
            
            zone "awsseoul.internal" IN {
                type forward;
                forward only;
                forwarders { 10.1.3.250; 10.1.4.250; };
            };

            zone "awssingapore.internal" IN {
                type forward;
                forward only;
                forwarders { 10.3.3.250; };
            };

            zone "idcsingapore.internal" IN {
                type forward;
                forward only;
                forwarders { 10.4.1.200; };
            };
            EOT

            mkdir /var/named/data
            touch /var/named/data/idcneta

            cat << EOT >> /var/named/data/idcneta
            @       IN SOA  ns.idcseoul.internal. root.idcseoul.internal. (
                                                    0       ; serial
                                                    1D      ; refresh
                                                    1H      ; retry
                                                    1W      ; expire
                                                    3H )    ; minimum
                    IN      NS  ns.idcseoul.internal.
                    IN      A   10.2.1.200
            ns      IN      A   10.2.1.200
            dnssrv  IN      A   10.2.1.200
            dbsrv   IN      A   10.2.1.100
            EOT
            systemctl restart named

  #IDC VPC DBS Instance
  IDCVPCDBInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-09e70258ddbdf3c90
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: IDC-DB-EC2
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref IDCVPCSN
          PrivateIpAddress: 10.2.1.100
          AssociatePublicIpAddress: true
          GroupSet:
            - !Ref IDCVPCSecurityGroup
      UserData:
        Fn::Base64: |
          #!/bin/bash
          (
          echo "qwe123"
          echo "qwe123"
          ) | passwd --stdin root
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          service sshd restart
          amazon-linux-extras install epel -y
          hostnamectl --static set-hostname Seoul-IDC-DB
          sed -i 's/nameserver 10.2.0.2/nameserver 10.2.1.200/' /etc/resolv.conf
          cat << EOT >> /etc/resolv.conf
          nameserver 10.2.0.2
          EOT
          yum install -y mariadb-server mariadb lynx
          systemctl start mariadb
          systemctl enable mariadb
          echo -e "\n\nqwe123\nqwe123\ny\ny\ny\ny\n" | /usr/bin/mysql_secure_installation
          mysql -uroot -pqwe123 -e "CREATE DATABASE sample; GRANT ALL PRIVILEGES ON *.* TO 'gasida'@'%' IDENTIFIED BY 'qwe123'; GRANT REPLICATION SLAVE ON *.* TO 'repl_user'@'%' IDENTIFIED BY 'qwe123'; flush privileges;"
          mysql -uroot -pqwe123 -e "USE sample;CREATE TABLE EMPLOYEES (ID int(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,NAME VARCHAR(45),ADDRESS VARCHAR(90));"
          cat <<EOT> /etc/my.cnf
          [mysqld]
          datadir=/var/lib/mysql
          socket=/var/lib/mysql/mysql.sock
          symbolic-links=0               
          log-bin=mysql-bin
          server-id=1
          [mysqld_safe]
          log-error=/var/log/mariadb/mariadb.log
          pid-file=/var/run/mariadb/mariadb.pid
          !includedir /etc/my.cnf.d
          EOT
          systemctl restart mariadb
          cat <<EOT> /home/ec2-user/list.txt
          10.1.3.100
          websrv1.awsseoul.internal
          10.1.4.100
          websrv2.awsseoul.internal
          10.2.1.100
          dbsrv.idcseoul.internal
          10.2.1.200
          dnssrv.idcseoul.internal
          10.3.3.100
          websrv1.awssingapore.internal
          10.4.1.100
          dbsrv.idcsingapore.internal
          10.4.1.200
          dnssrv.idcsingapore.internal
          EOT
          curl -o /home/ec2-user/pingall.sh https://cloudneta-book.s3.ap-northeast-2.amazonaws.com/chapter6/pingall.sh --silent
          chmod +x /home/ec2-user/pingall.sh


  ################################################
  #                                               Load Balancer                                                       #
  ################################################

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: AWS-VPC-ALB-TG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref AWSVPC
      Targets:
        - Id: !Ref AWSVPCPrivateInstance1
          Port: 80
        - Id: !Ref AWSVPCPrivateInstance2
          Port: 80

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: AWSVPCIGWAttachment
    Properties:
      Name: AWS-ALB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref AWSVPCSecurityGroup
      Subnets:
        - !Ref AWSVPCPublicSN1
        - !Ref AWSVPCPublicSN2

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  ################################################
  #                                               Transit Gateway                                                   #
  ################################################

  # Transit 게이트웨이 생성
  TransitGateway:
    Type: AWS::EC2::TransitGateway
    Properties:
      Tags:
        - Key: Name
          Value: Transit-Gateway

  # TG AWS VPC 연결
  AWSTransitGatewayAtt:
    Type: AWS::EC2::TransitGatewayAttachment
    DependsOn: AWSVPC
    Properties:
      VpcId: !Ref AWSVPC
      SubnetIds:
        - !Ref AWSVPCPrivateSN1
        - !Ref AWSVPCPrivateSN2
      TransitGatewayId: !Ref TransitGateway
      Tags:
        - Key: Name
          Value: TGW-ATT-To-AWSVPC

  # AWSVPC RT 경로 추가
  VPNVPCRoute:
    Type: AWS::EC2::Route
    DependsOn: AWSTransitGatewayAtt
    Properties:
      RouteTableId: !Ref AWSVPCRT
      DestinationCidrBlock: 10.0.0.0/8 # 생성된 VPC 들이 전부 포함된 서브넷 (10.0.0.0/16 ,10.1.0.0/16 ..)
      TransitGatewayId: !Ref TransitGateway

  # AWSVPC RT 경로 추가
  VPNVPCRoute1:
    Type: AWS::EC2::Route
    DependsOn: AWSTransitGatewayAtt
    Properties:
      RouteTableId: !Ref AWSVPCPrivateRT1
      DestinationCidrBlock: 10.0.0.0/8 # 생성된 VPC 들이 전부 포함된 서브넷 (10.0.0.0/16 ,10.1.0.0/16 ..)
      TransitGatewayId: !Ref TransitGateway

  # AWSVPC RT 경로 추가
  VPNVPCRoute2:
    Type: AWS::EC2::Route
    DependsOn: AWSTransitGatewayAtt
    Properties:
      RouteTableId: !Ref AWSVPCPrivateRT2
      DestinationCidrBlock: 10.0.0.0/8 # 생성된 VPC 들이 전부 포함된 서브넷 (10.0.0.0/16 ,10.1.0.0/16 ..)
      TransitGatewayId: !Ref TransitGateway

  # # TGW Route 추가
  # # ## 손으로 직접 추가
  # VPNTGRoute:
  #   Type: AWS::EC2::TransitGatewayRoute
  #   Properties:
  #     DestinationCidrBlock: 10.2.0.0/16
  #     TransitGatewayAttachmentId: tgw-attach-0fd53070b2115f1c1
  #     TransitGatewayRouteTableId: tgw-rtb-09a14bc564d158653

  ################################################
  #                                               VPN                                                                        #
  ################################################

  # TG VPN 연결 ?
  MyVPNConnection:
    Type: AWS::EC2::VPNConnection
    DependsOn: IDCCGW
    Properties:
      CustomerGatewayId: !Ref IDCCGW
      Type: ipsec.1
      StaticRoutesOnly: true
      TransitGatewayId: !Ref TransitGateway
      VpnTunnelOptionsSpecifications:
        - PreSharedKey: cloudneta
        - PreSharedKey: cloudneta
      Tags:
        - Key: Name
          Value: AWS-VPC-connect-to-IDCCG(VPN)

  # CGW 설정
  IDCCGW:
    Type: AWS::EC2::CustomerGateway
    Properties:
      Type: ipsec.1
      BgpAsn: 65000
      IpAddress: !Ref CGWInstanceEIP
      Tags:
        - Key: Name
          Value: IDC-VPN-CGW
################################################
#                                               DNS                                                                        #
################################################

# PublicDNS:
#   Type: AWS::Route53::HostedZone
#   Properties:
#     Name: mwoya.wtf
#     HostedZoneConfig:
#       Comment: Public Hosted Zone For mwoya.wtf

# # 설정
  # ALBAlias:
  #   Type: AWS::Route::RecordSet
  #   Properties:
  #     Name: test.mwoya.wtf
  #     Type: A
  #     HostedZoneId: !Ref PublicDNS
  #     AlsiasTarget:
  #       DNSName: !GetAtt ApplicationLoadBalancer.DNSName
  #       HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneI


################################################
#                                      Route53 사용                                                                   #
################################################

  PriavateDNS1:
    Type: AWS::Route53::HostedZone
    DependsOn: AWSVPC
    Properties:
      HostedZoneConfig:
        Comment: Pirvate hosted zone for awsnet.net
      Name: awsseoul.internal
      VPCs:
        - VPCId: !Ref AWSVPC
          VPCRegion: ap-northeast-2
      HostedZoneTags:
        - Key: Name
          Value: awsnetadomain

  DNSRecord1:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref PriavateDNS1
      Name: websrv1.awsseoul.internal
      ResourceRecords:
      - 10.1.3.100
      TTL: 300
      Type: A

  DNSRecord2:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref PriavateDNS1
      Name: websrv2.awsseoul.internal
      ResourceRecords:
      - 10.1.4.100
      TTL: 300
      Type: A


# # 인바운드 규칙
  InboundEP:
    Type: AWS::Route53Resolver::ResolverEndpoint
    Properties:
      Direction: INBOUND
      IpAddresses:
        - Ip: 10.1.3.250
          SubnetId: !Ref AWSVPCPrivateSN1
        - Ip: 10.1.4.250
          SubnetId: !Ref AWSVPCPrivateSN2
      SecurityGroupIds:
        - !Ref AWSVPCSecurityGroup
      Tags:
        - Key: Name
          Value: idc-to-aws-inbound

# # 아웃바운드 규칙
  OutboundEP:
    Type: AWS::Route53Resolver::ResolverEndpoint
    Properties:
      Direction: OUTBOUND
      IpAddresses:
        - Ip: 10.1.3.251
          SubnetId: !Ref AWSVPCPrivateSN1
        - Ip: 10.1.4.251
          SubnetId: !Ref AWSVPCPrivateSN2
      SecurityGroupIds:
        - !Ref AWSVPCSecurityGroup
      Tags:
        - Key: Name
          Value: aws-to-idc-outbound

#********************************************************************************#
# # Forward 규칙 설정  SEOUL AWS -> IDC SEOUL
  ForwardRule1:
    Type: AWS::Route53Resolver::ResolverRule
    Properties:
      DomainName: idcseoul.internal
      Name: IDC-to-AWS-ForwardRule
      ResolverEndpointId: !Ref OutboundEP
      RuleType: FORWARD
      TargetIps: 
        - Ip: 10.2.1.200
          Port: 53

# # SEOUL AWS -> IDC SEOUL 합치기
  ResolverRuleAssociation1:
    Type: AWS::Route53Resolver::ResolverRuleAssociation
    Properties:
      Name: Resover-Rule-Association
      ResolverRuleId: !Ref ForwardRule1
      VPCId: !Ref AWSVPC

#********************************************************************************#
# # Forward 규칙 설정 SEOUL AWS -> SINGAPORE AWS
  ForwardRule2:
    Type: AWS::Route53Resolver::ResolverRule
    Properties:
      DomainName: awssingapore.internal
      Name: IDC-to-AWS-singapore-ForwardRule
      ResolverEndpointId: !Ref OutboundEP
      RuleType: FORWARD
      TargetIps: 
        - Ip: 10.3.3.250
          Port: 53

# # 합치기 SEOUL AWS -> SINGAPORE AWS
  ResolverRuleAssociation2:
    Type: AWS::Route53Resolver::ResolverRuleAssociation
    Properties:
      Name: Resover-Rule-Association
      ResolverRuleId: !Ref ForwardRule2
      VPCId: !Ref AWSVPC

#********************************************************************************#
# # Forward 규칙 설정 SEOUL AWS -> SINGAPORE IDC
  ForwardRule3:
    Type: AWS::Route53Resolver::ResolverRule
    Properties:
      DomainName: idcsingapore.internal
      Name: Seoul-to-IDC-singapore-ForwardRule
      ResolverEndpointId: !Ref OutboundEP
      RuleType: FORWARD
      TargetIps: 
        - Ip: 10.4.1.200
          Port: 53

# # 합치기 SEOUL AWS -> SINGAPORE IDC
  ResolverRuleAssociation3:
    Type: AWS::Route53Resolver::ResolverRuleAssociation
    Properties:
      Name: Resover-Rule-Association
      ResolverRuleId: !Ref ForwardRule3
      VPCId: !Ref AWSVPC
