Parameters:
  KeyName:
    Description: Nmae of SSH access Key
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

Resources:
################################################
#                                               VPC                                                                        #
################################################

# ELB VPC
  ELBVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: ELB-VPC

  ELBIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ELB-IGW

  ELBVPCIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref ELBIGW
      VpcId: !Ref ELBVPC

# MY VPC
  MYVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 20.0.0.0/16
      Tags:
        - Key: Name
          Value: MY-VPC

  MYIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MY-IGW

  MYVPCIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MYIGW
      VpcId: !Ref MYVPC


################################################
#                                               Public Subnet                                                        #
################################################

# ELB VPC Public Subnet
  ELBPublicSN1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ELBVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: ELB-Public-SN-1

  ELBPublicSN2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ELBVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: ELB-Public-SN-2

# MY VPC public SN
  MYPublicSN:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MYVPC
      CidrBlock: 20.0.0.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: MY-Public-SN

################################################
#                                               Routing Table                                                        #
################################################

# ELB Public SN RT
  ELBPublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ELBVPC
      Tags:
        - Key: Name
          Value: ELB-Public-RT

# MY Public SN RT
  MYPublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MYVPC
      Tags:
        - Key: Name
          Value: MY-Public-RT

################################################
#                                                Route                                                                     #
################################################

# ELB VPC Route
  ELBVPCRoute:
    Type: AWS::EC2::Route
    DependsOn: ELBVPCIGWAttachment
    Properties:
      RouteTableId: !Ref ELBPublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ELBIGW

# My VPC Route
  MYVPCRoute:
    Type: AWS::EC2::Route
    DependsOn: MYVPCIGWAttachment
    Properties:
      RouteTableId: !Ref MYPublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MYIGW

################################################
#                                               VPC & RT 연결                                                        #
################################################

# ELB public SN1 연결
  ELBVPCSN1RouteTableAssociations:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ELBPublicSN1
      RouteTableId: !Ref ELBPublicRT

# ELB public SN2 연결
  ELBVPCSN2RouteTableAssociations:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ELBPublicSN2
      RouteTableId: !Ref ELBPublicRT

# MY public SN 연결
  MYVPCSNRouteTableAssociations:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MYPublicSN
      RouteTableId: !Ref MYPublicRT

################################################
#                                               SG                                                                           #
################################################

# ELB VPC SG
  ELBVPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via Subnet
      VpcId: !Ref ELBVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 161
        ToPort: 161
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ELBVPC-SecurityGroup

# MY VPC SG
  MYVPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via Subnet
      VpcId: !Ref MYVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 161
        ToPort: 161
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: MYVPC-SecurityGroup

################################################
#                                               Load Balancer                                                       #
################################################
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: My-ALB-TG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref ELBVPC

  ALBDevTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: My-ALB-TG1
      Port: 80
      Protocol: HTTP
      VpcId: !Ref ELBVPC

  ALBMgtTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: My-ALB-TG2
      Port: 80
      Protocol: HTTP
      VpcId: !Ref ELBVPC

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: ELBVPCIGWAttachment
    Properties:
      Name: ELB-ALB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ELBVPCSecurityGroup
      Subnets:
        - !Ref ELBPublicSN1
        - !Ref ELBPublicSN2

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # ALBListener2:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref ALBMgtTargetGroup  
  #     LoadBalancerArn: !Ref ApplicationLoadBalancer
  #     Port: 443
  #     Protocol: HTTPS

################################################
#                                              Auto Scaling                                                           #
################################################

# 시작 Template
  SN1LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-launch-template-for-auto-scaling'
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref ELBVPCSecurityGroup
            DeleteOnTermination: true
        ImageId: ami-09e70258ddbdf3c90
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        UserData:
          Fn::Base64:
            !Sub |
            #!/bin/bash
            amazon-linux-extras install -y epel
            yum install -y httpd php git stress
            git clone https://github.com/suminhong/cloudformation_yaml.git /cf
            mkdir /var/www/html/dev
            mv /cf/webstress.php /var/www/html/dev/index.php
            echo "<h1>ELB-EC2-1 Web Server</h1>" > /var/www/html/index.html
            systemctl enable httpd
            systemctl start httpd

  SN2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub 'SN2-launch-template-for-auto-scaling'
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref ELBVPCSecurityGroup
            DeleteOnTermination: true
        ImageId: ami-09e70258ddbdf3c90
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        UserData:
          Fn::Base64:
            !Sub |
            #!/bin/bash
            amazon-linux-extras install -y epel
            yum install -y httpd php git stress
            git clone https://github.com/suminhong/cloudformation_yaml.git /cf
            mkdir /var/www/html/mgt
            mv /cf/webstress.php /var/www/html/mgt/index.php
            echo "<h1>ELB-EC2-2 Web Server</h1>" > /var/www/html/index.html
            systemctl enable httpd
            systemctl start httpd



# Auto Scaling Group
  ASG1:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: webserverASG1
      VPCZoneIdentifier:
        - !Ref ELBPublicSN1
      Cooldown: 10
      HealthCheckGracePeriod: 120
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref SN1LaunchTemplate
        Version: !GetAtt SN1LaunchTemplate.LatestVersionNumber
      MaxSize: 4
      MinSize: 1
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref ALBDevTargetGroup
        - !Ref ALBTargetGroup
      Tags: 
        - Key: Name
          Value: web-asg1
          PropagateAtLaunch: true

  ASG2:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: webserverASG2
      VPCZoneIdentifier:
        - !Ref ELBPublicSN2
      Cooldown: 10
      HealthCheckGracePeriod: 120
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref SN2LaunchTemplate
        Version: !GetAtt SN2LaunchTemplate.LatestVersionNumber
      MaxSize: 4
      MinSize: 1
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref ALBMgtTargetGroup
        - !Ref ALBTargetGroup
      Tags: 
        - Key: Name
          Value: web-asg2
          PropagateAtLaunch: true

  ALBListenerRule1:  
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBDevTargetGroup
      Conditions:
        - Field: path-pattern
          Values: 
            - /dev/*
      ListenerArn: !Ref ALBListener
      Priority: 1

  ALBListenerRule2:  
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBMgtTargetGroup
      Conditions:
        - Field: path-pattern
          Values: 
            - /mgt/*
      ListenerArn: !Ref ALBListener
      Priority: 2

  ASG1Policy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref ASG1
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50

  ASG2Policy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref ASG2
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50