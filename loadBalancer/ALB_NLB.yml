Parameters:
  KeyName:
    Description: Nmae of SSH access Key
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

Resources:

# ELB 전용 VPC
  ELBVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: ELB-VPC

# MYVPC
  MYVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 20.0.0.0/16
      Tags:
        - Key: Name
          Value: MY-VPC

# ELBVPC 전용 IG
  ELBIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ELB-IGW

# MYVPC 전용 IG
  MYIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MY-IGW

##############IGW#######################
# #############연결#######################

# ELBVPC 연결 ELBIGW 
  ELBVPCIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref ELBIGW
      VpcId: !Ref ELBVPC

# ELBVPC 연결 ELBIGW 
  MYVPCIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MYIGW
      VpcId: !Ref MYVPC

# subnet
  ELBPublicSN1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ELBVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: ELB-Public-SN-1

  ELBPublicSN2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ELBVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: ELB-Public-SN-2

  MYPublicSN:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MYVPC
      CidrBlock: 20.0.0.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: MY-Public-SN

################################################
#                                               Routing Table                                                        #
################################################

# ELB RT
  ELBPublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ELBVPC
      Tags:
        - Key: Name
          Value: ELB-Public-RT

# MY RT 
  MYPublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MYVPC
      Tags:
        - Key: Name
          Value: MY-Public-RT


################################################
#                                                Route                                                                     #
################################################
  ELBVPCRoute:
    Type: AWS::EC2::Route
    DependsOn: ELBVPCIGWAttachment
    Properties:
      RouteTableId: !Ref ELBPublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ELBIGW

  MYVPCRoute:
    Type: AWS::EC2::Route
    DependsOn: MYVPCIGWAttachment
    Properties:
      RouteTableId: !Ref MYPublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MYIGW

################################################
#                                               VPC & RT 연결                                                        #
################################################

# ELB 연결 
  ELBVPCSN1RouteTableAssociations:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ELBPublicSN1
      RouteTableId: !Ref ELBPublicRT

  ELBVPCSN2RouteTableAssociations:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ELBPublicSN2
      RouteTableId: !Ref ELBPublicRT

  MYVPCSNRouteTableAssociations:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MYPublicSN
      RouteTableId: !Ref MYPublicRT

################################################
#                                               SG                                                                           #
################################################

# ELB VPC SG
  ELBVPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via Subnet
      VpcId: !Ref ELBVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 161
        ToPort: 161
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ELBVPC-SecurityGroup

# MY VPC SG
  MYVPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via Subnet
      VpcId: !Ref MYVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 161
        ToPort: 161
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ELBVPC-SecurityGroup

################################################
#                                               EC2                                                                         #
################################################

# ELB EC2
  ELBVPCEC2one:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-09e70258ddbdf3c90
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: ELB-VPC-EC2-1
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref ELBPublicSN1
          GroupSet:
          - !Ref ELBVPCSecurityGroup
          AssociatePublicIpAddress: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostname ELB-EC2-1
            amazon-linux-extras install epel -y
            yum install httpd -y
            yum install net-snmp net-snmp-utils -y
            yum install tcpdump -y
            service httpd start
            chkconfig httpd on
            service snmpd start
            chkconfig snmpd on
            echo "<h1>ELB-EC2-1 Web Server</h1>" > /var/www/html/index.html
            mkdir /var/www/html/mgt
            echo "<h1>ELB-EC2-1 Mgt Web Page</h1>" > /var/www/html/mgt/index.html

  ELBVPCEC2two:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-09e70258ddbdf3c90
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: ELB-VPC-EC2-2
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref ELBPublicSN2
          GroupSet:
          - !Ref ELBVPCSecurityGroup
          AssociatePublicIpAddress: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostname ELB-EC2-2
            amazon-linux-extras install epel -y
            yum install httpd -y
            yum install net-snmp net-snmp-utils -y
            yum install tcpdump -y
            service httpd start
            chkconfig httpd on
            service snmpd start
            chkconfig snmpd on
            echo "<h1>ELB-EC2-2 Web Server</h1>" > /var/www/html/index.html
            mkdir /var/www/html/mgt
            echo "<h1>ELB-EC2-2 Mgt Web Page</h1>" > /var/www/html/mgt/index.html

# MYVPC EC2
  MYVPCEC2two:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-09e70258ddbdf3c90
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: MY-VPC-EC2
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref MYPublicSN
          GroupSet:
          - !Ref MYVPCSecurityGroup
          AssociatePublicIpAddress: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            amazon-linux-extras install epel -y
            yum install net-snmp-utils -y

################################################
#                                 NLB                                                                                       #
################################################

# Taraget Group 생성
  NLBTG1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: NLB-TG1
      Port: 161
      Protocol: UDP
      HealthCheckPort: 80
      VpcId: !Ref ELBVPC
      Targets:
        - Id: !Ref ELBVPCEC2one
          Port: 161
        - Id: !Ref ELBVPCEC2two
          Port: 161

# Load Balancer 생성
  NLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: ELBVPCIGWAttachment
    Properties:
      Type: network
      Name: My-NLB
      Scheme: internet-facing
      Subnets:
        - !Ref ELBPublicSN1
        - !Ref ELBPublicSN2
      Tags:
        - Key: Name
          Value: Custom-NLB

#  Listener 생성 
  NLBListener1:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NLBTG1
      LoadBalancerArn: !Ref NLB
      Port: 161
      Protocol: UDP


################################################
#                                 ALB                                                                                      #
################################################

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: My-ALB-TG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref ELBVPC
      Targets:
        - Id: !Ref ELBVPCEC2one
          Port: 80
        - Id: !Ref ELBVPCEC2two
          Port: 80

  ALBTargetGroupDev:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: My-ALB-TG-Dev
      Port: 80
      Protocol: HTTP
      VpcId: !Ref ELBVPC
      Targets:
        - Id: !Ref ELBVPCEC2one
          Port: 80

  ALBTargetGroupMgt:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: My-ALB-TG-Mgt
      Port: 80
      Protocol: HTTP
      VpcId: !Ref ELBVPC
      Targets:
        - Id: !Ref ELBVPCEC2two
          Port: 80

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: My-ALB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ELBVPCSecurityGroup
      Subnets:
        - !Ref ELBPublicSN1
        - !Ref ELBPublicSN2

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBListenerRule1:  
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroupDev
      Conditions:
        - Field: path-pattern
          Values: 
            - /dev/*
      ListenerArn: !Ref ALBListener
      Priority: 1

  ALBListenerRule2:  
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroupMgt
      Conditions:
        - Field: path-pattern
          Values: 
            - /mgt/*
      ListenerArn: !Ref ALBListener
      Priority: 2