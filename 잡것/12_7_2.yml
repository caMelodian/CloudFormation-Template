Parameters:
  KeyName:
    Description: Name of SSH access Key
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  LatestAmiId:
    Description: (DO NOT CHANGE)
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    AllowedValues:
      - /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
#VPC
  VPC0:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: TGW-VPC

  VPC1:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.10.0.0/16
      Tags:
        - Key: Name
          Value: TGW-VPC

  VPC2:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.20.0.0/16
      Tags:
        - Key: Name
          Value: TGW-VPC
#IGW
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: TGW-VPC0-IGW

  IGW2:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: TGW-VPC1-IGW2

  IGW3:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: TGW-VPC1-IGW3
#VPC-IGW
  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC0

  IGWAttachment2:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW2
      VpcId: !Ref VPC1

  IGWAttachment3:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW3
      VpcId: !Ref VPC2
#PublicRT
  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC0
      Tags:
        - Key: Name
          Value: TGW-Public-RT
#PrivateRT
  PrivateRT1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: TGW-Privat-RT1
  PrivateRT2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC2
      Tags:
        - Key: Name
          Value: TGW-Privat-RT2
#Route
  DefaultPublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  DefaultPublicRoute2:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties:
      RouteTableId: !Ref PrivateRT1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW2

  DefaultPublicRoute3:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties:
      RouteTableId: !Ref PrivateRT2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW3
#PublicSN
  VPC0SN1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC0
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: TGW-VPC0-SN1

  VPC0SN2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC0
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: TGW-VPC0-SN2
#PrivateSN
  VPC1SN1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      CidrBlock: 10.10.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: TGW-VPC1-SN1

  VPC1SN2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      CidrBlock: 10.10.2.0/24
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: TGW-VPC1-SN2

  VPC2SN1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      CidrBlock: 10.20.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: TGW-VPC2-SN1

  VPC2SN2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      CidrBlock: 10.20.2.0/24
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: TGW-VPC2-SN2
#연동서브넷
  VPC0SN3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC0
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: TGW-VPC0-SN3

  VPC0SN4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC0
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: TGW-VPC0-SN4

  VPC1SN3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      CidrBlock: 10.10.3.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: TGW-VPC1-SN3

  VPC1SN4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      CidrBlock: 10.10.4.0/24
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: TGW-VPC1-SN4

  VPC2SN3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      CidrBlock: 10.20.3.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: TGW-VPC2-SN3

  VPC2SN4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      CidrBlock: 10.20.4.0/24
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: TGW-VPC2-SN4
#PublicSN-Route
  PublicSNRouteTableAssociations1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPC0SN1
      RouteTableId: !Ref PublicRT

  PublicSNRouteTableAssociations2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPC0SN2
      RouteTableId: !Ref PublicRT
#PrivateSN-Route
  PrivateSNRouteTableAssociations1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPC1SN1
      RouteTableId: !Ref PrivateRT1

  PrivateSNRouteTableAssociations2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPC1SN2
      RouteTableId: !Ref PrivateRT1

  PrivateSNRouteTableAssociations3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPC2SN1
      RouteTableId: !Ref PrivateRT2

  PrivateSNRouteTableAssociations4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPC2SN2
      RouteTableId: !Ref PrivateRT2
#SG
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 and SSH access via port 22
      VpcId: !Ref VPC0
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SecurityGroup

  SecurityGroup2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 and SSH access via port 22
      VpcId: !Ref VPC1
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SecurityGroup2

  SecurityGroup3:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 and SSH access via port 22
      VpcId: !Ref VPC2
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SecurityGroup3
#PublicEC2
  VPC0EC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: VPC0-EC2
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref VPC0SN1
          GroupSet:
          - !Ref SecurityGroup
          AssociatePublicIpAddress: true
          PrivateIpAddress: 10.0.1.10
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostnamectl --static set-hostname VPC0Instance1
            yum install -y tcpdump squid
            cat <<EOT> /etc/squid/squid.conf
            http_port 3128
            acl all src 0.0.0.0/0
            http_access allow all
            http_access deny all
            EOT
            systemctl start squid && systemctl enable squid
            cat <<EOT> /home/ec2-user/list.txt
            10.0.1.10
            10.10.1.10
            10.10.2.10
            10.20.1.10
            10.20.2.10
            EOT
            yum install httpd -y
            systemctl start httpd && systemctl enable httpd
            echo "<h1>TGW Lab - MgMt Server1</h1>" > /var/www/html/index.html
            curl -o /home/ec2-user/pingall.sh https://cloudneta-book.s3.ap-northeast-2.amazonaws.com/chapter6/pingall.sh --silent
            cp /home/ec2-user/pingall.sh /var/www/html/pingall.sh
            cp /home/ec2-user/list.txt /var/www/html/list.txt
            chmod +x /home/ec2-user/pingall.sh

  VPC1EC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: VPC1-EC2-1
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref VPC1SN1
          PrivateIpAddress: 10.10.1.10
          GroupSet:
          - !Ref SecurityGroup2
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            amazon-linux-extras install epel -y
            hostnamectl --static set-hostname VPC1-EC2-1

  VPC1EC2two:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: VPC1-EC2-2
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref VPC1SN2
          PrivateIpAddress: 10.10.2.10
          GroupSet:
          - !Ref SecurityGroup2
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            amazon-linux-extras install epel -y
            hostnamectl --static set-hostname VPC1-EC2-2

  VPC2EC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: VPC2-EC2-1
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref VPC2SN1
          PrivateIpAddress: 10.20.1.10
          GroupSet:
          - !Ref SecurityGroup3
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            amazon-linux-extras install epel -y
            hostnamectl --static set-hostname VPC2-EC2-1

  VPC2EC2two:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: VPC2-EC2-2
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref VPC2SN2
          PrivateIpAddress: 10.20.2.10
          GroupSet:
          - !Ref SecurityGroup3
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            amazon-linux-extras install epel -y
            hostnamectl --static set-hostname VPC2-EC2-2

#Endpoint
  Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SubnetIds: 
      - !Ref VPC0SN1
      - !Ref VPC0SN2
      VpcId: !Ref VPC0
      VpcEndpointType: 'Interface'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'