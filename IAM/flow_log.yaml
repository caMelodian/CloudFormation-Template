Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances. Linked to AWS Parameter
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

Resources:

# VPC Flow Log

  # CNFlowLogRole:
    # Type: AWS::IAM::Role
    # Properties:
      # AssumeRolePolicyDocument:
        # Statement:
          # - Effect: Allow
            # Principal:
              # Service:
                # - vpc-flow-logs.amazonaws.comz
            # Action:
              # - 'sts:AssumeRole'
      # Path: /

  # CNFlowLogPolicy:
    # Type: AWS::IAM::Policy
    # Properties:
      # PolicyName: CNFlowLogPolicy
      # PolicyDocument:
        # Statement:
          # - Effect: Allow
            # Action:
              # - logs:CreateLogGroup
              # - logs:CreateLogStream
              # - logs:PutLogEvents
              # - logs:DescribeLogGroups
              # - logs:DescribeLogStreams
            # Resource: !GetAtt 'CNFlowLogGroup.Arn'
      # Roles:
        # - !Ref CNFlowLogRole

  # CNFlowLogGroup:
    # Type: AWS::Logs::LogGroup
    # Properties: 
      # LogGroupName: CNvpcflowloggroup
      # RetentionInDays: 1

  # CNFlowLog:
    # Type: AWS::EC2::FlowLog
    # DependsOn: MyVPC
    # Properties:
      # DeliverLogsPermissionArn: !GetAtt CNFlowLogRole.Arn
      # LogGroupName: !Ref CNFlowLogGroup
      # ResourceId: !Ref MyVPC
      # MaxAggregationInterval: 60
      # ResourceType:   VPC
      # TrafficType: REJECT
      # Tags:
        # - Key: Name
          # Value: FlogLogForVPC
      # LogFormat: '${srcaddr} ${srcport} ${dstaddr} ${dstport} ${tcp-flags} ${protocol} ${action} ${instance-id}'
      
      # LogFormat: '${version} ${vpc-id} ${subnet-id} ${instance-id} ${srcaddr} ${dstaddr} ${srcport} ${dstport} ${protocol} ${tcp-flags} ${type} ${pkt-srcaddr} ${pkt-dstaddr}'

# VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
     CidrBlock: 10.0.0.0/16
     Tags:
        - Key: Name
          Value: My-VPC

  MyIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: My-IGW

  MyIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyIGW
      VpcId: !Ref MyVPC

  MyPublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: My-Public-RT

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: MyIGWAttachment
    Properties:
      RouteTableId: !Ref MyPublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIGW

  MyPublicSN:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: My-Public-SN

  MyPublicSNRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPublicRT
      SubnetId: !Ref MyPublicSN

  ServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Server1 Security Group
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: Server-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

  ServerSG2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Server2 Security Group
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: Server-SG-2
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

  ServerEC2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-006e2f9fa7597680a
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Server-EC2
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref MyPublicSN
          GroupSet:
          - !Ref ServerSG
          AssociatePublicIpAddress: true
          PrivateIpAddress: 10.0.0.10
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostnamectl --static set-hostname Server-EC2
            yum install httpd lynx tmux tcpdump -y
            systemctl start httpd && systemctl enable httpd
            echo "<h1>Security Group & Network ACL TEST 1</h1>" > /var/www/html/index.html
            sed -i "s/UTC/Asia\/Seoul/g" /etc/sysconfig/clock
            ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime

  ServerEC22:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-006e2f9fa7597680a
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Server-EC2-2
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref MyPublicSN
          GroupSet:
          - !Ref ServerSG2
          AssociatePublicIpAddress: true
          PrivateIpAddress: 10.0.0.20
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostnamectl --static set-hostname Server-EC2-2
            yum install httpd lynx tmux tcpdump -y
            systemctl start httpd && systemctl enable httpd
            echo "<h1>Security Group & Network ACL TEST 2</h1>" > /var/www/html/index.html
            sed -i "s/UTC/Asia\/Seoul/g" /etc/sysconfig/clock
            ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime