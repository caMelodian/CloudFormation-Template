Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances. Linked to AWS Parameter
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

Resources:
  ELBVPC:
    Type: AWS::EC2::VPC
    Properties:
     CidrBlock: 10.0.0.0/16
     Tags:
        - Key: Name
          Value: ELB-VPC

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
     CidrBlock: 20.0.0.0/16
     Tags:
        - Key: Name
          Value: My-VPC

  ELBIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ELB-IGW

  MyIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: My-IGW

  ELBIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref ELBIGW
      VpcId: !Ref ELBVPC

  MyIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyIGW
      VpcId: !Ref MyVPC

  ELBPublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ELBVPC
      Tags:
        - Key: Name
          Value: ELB-Public-RT

  ELBDefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: ELBIGWAttachment
    Properties:
      RouteTableId: !Ref ELBPublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ELBIGW

  MyPublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: My-Public-RT

  MyDefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: MyIGWAttachment
    Properties:
      RouteTableId: !Ref MyPublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIGW

  ELBPublicSN1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ELBVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: ELB-Public-SN-1

  ELBPublicSN2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ELBVPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: ELB-Public-SN-2

  MyPublicSN:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 20.0.0.0/24
      Tags:
        - Key: Name
          Value: My-Public-SN

  ELBPublicSNRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ELBPublicRT
      SubnetId: !Ref ELBPublicSN1

  ELBPublicSNRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ELBPublicRT
      SubnetId: !Ref ELBPublicSN2

  MyPublicSNRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPublicRT
      SubnetId: !Ref MyPublicSN

  MySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 and SSH access via port 22
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: My-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

  ELBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 and SSH access via port 22
      VpcId: !Ref ELBVPC
      Tags:
        - Key: Name
          Value: ELBSG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '161'
        ToPort: '161'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

  MyEC2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-03b42693dc6a7dc35
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: My-EC2
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref MyPublicSN
          GroupSet:
          - !Ref MySG
          AssociatePublicIpAddress: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            yum install net-snmp-utils -y
## 시작템플릿-1 ##
  myLaunchTemplate1:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-1-launch-template-for-auto-scaling'
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref ELBSG
            DeleteOnTermination: true
        ImageId: ami-09e70258ddbdf3c90
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              hostname ELB-EC2-1
              amazon-linux-extras install -y epel
              yum install -y httpd php git stress
              git clone https://github.com/suminhong/cloudformation_yaml.git /cf
              mv /cf/webstress.php /var/www/html/index.php
              echo "<h1>ELB-EC2-1 Web Server</h1>" > /var/www/html/index.html
              mkdir /var/www/html/dev
              echo "<h1>ELB-EC2-1 Dev Web Page</h1>" > /var/www/html/dev/index.html
              systemctl enable httpd
              systemctl start httpd

## 시작템플릿-2 ##
  myLaunchTemplate2:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-2-launch-template-for-auto-scaling'
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref ELBSG
            DeleteOnTermination: true
        ImageId: ami-09e70258ddbdf3c90
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              hostname ELB-EC2-2
              amazon-linux-extras install -y epel
              yum install -y httpd php git stress
              git clone https://github.com/suminhong/cloudformation_yaml.git /cf
              mv /cf/webstress.php /var/www/html/index.php
              echo "<h1>ELB-EC2-2 Web Server</h1>" > /var/www/html/index.html
              mkdir /var/www/html/mgt
              echo "<h1>ELB-EC2-2 Mgt Web Page</h1>" > /var/www/html/mgt/index.html
              systemctl enable httpd
              systemctl start httpd
## AG-1 ##
  ASG1:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: webserverASG-1
      VPCZoneIdentifier:
        - !Ref ELBPublicSN1
      Cooldown: 10
      HealthCheckGracePeriod: 120
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref myLaunchTemplate1
        Version: !GetAtt myLaunchTemplate1.LatestVersionNumber
      MaxSize: 4
      MinSize: 1
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref ALBTargetGroup
        - !Ref ALBTargetGroupDev
      Tags:
        - Key: Name
          Value: web-asg-1
          PropagateAtLaunch: true

  ASGPolicy1:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref ASG1
      PolicyName: TargetTrackingScaling1
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50

## AG-2 ##
  ASG2:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: webserverASG-2
      VPCZoneIdentifier:
        - !Ref ELBPublicSN2
      Cooldown: 10
      HealthCheckGracePeriod: 120
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref myLaunchTemplate2
        Version: !GetAtt myLaunchTemplate2.LatestVersionNumber
      MaxSize: 4
      MinSize: 1
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref ALBTargetGroup
        - !Ref ALBTargetGroupMgt
      Tags:
        - Key: Name
          Value: web-asg-2
          PropagateAtLaunch: true

  ASGPolicy2:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref ASG2
      PolicyName: TargetTrackingScaling2
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50


  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: My-ALB-TG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref ELBVPC

          
  ALBTargetGroupDev:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: My-ALB-TG-Dev
      Port: 80
      Protocol: HTTP
      VpcId: !Ref ELBVPC

          
  ALBTargetGroupMgt:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: My-ALB-TG-Mgt
      Port: 80
      Protocol: HTTP
      VpcId: !Ref ELBVPC


  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: My-ALB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ELBSG
      Subnets:
        - !Ref ELBPublicSN1
        - !Ref ELBPublicSN2
        
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBListenerRule1:  
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroupDev
      Conditions:
        - Field: path-pattern
          Values: 
            - /dev/*
      ListenerArn: !Ref ALBListener
      Priority: 1
      
  ALBListenerRule2:  
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroupMgt
      Conditions:
        - Field: path-pattern
          Values: 
            - /mgt/*
      ListenerArn: !Ref ALBListener
      Priority: 2
     

